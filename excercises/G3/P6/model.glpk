param m;
param M;
param precioProd;
set aceites;
set lineas;

param capacidadLinea{i in lineas};
param consumoLinea{i in lineas, a in aceites};

param durezaMax;
param durezaMin;
param dureza{ a in aceites};
param costo{ a in aceites};

param maxAceites;
param minAceite;

set mant_ranges;
param mant_mins { r in mant_ranges };
param mant_maxs { r in mant_ranges };
param mant_price { r in mant_ranges };

# refinamiento de aceite

var aceiteRefinado{a in aceites} >= 0;

s.t. refinamiento_linea_{i in lineas}: capacidadLinea[i] >= sum{a in aceites} consumoLinea[i, a] * aceiteRefinado[a];

# indicadores

var seUsaAceite{a in aceites} binary >= 0;

s.t. max_seUsaAceite{a in aceites}: aceiteRefinado[a] <= seUsaAceite[a] * M;
s.t. min_seUsaAceite{a in aceites}: seUsaAceite[a] * m <= aceiteRefinado[a];

# restricciones tecnolÃ³gicas

s.t. _maxAceites: sum{a in aceites} seUsaAceite[a] <= maxAceites;

s.t. _minAceite{a in aceites}: aceiteRefinado[a] >= minAceite * seUsaAceite[a];

s.t. AorBthenC: m * (seUsaAceite['A'] + seUsaAceite['B'] ) >= seUsaAceite['C'];

# dureza

s.t. minDur: durezaMin * sum{a in aceites} aceiteRefinado[a]<= sum{a in aceites} aceiteRefinado[a] * dureza[a];
s.t. maxDur: durezaMax * sum{a in aceites} aceiteRefinado[a] >= sum{a in aceites} aceiteRefinado[a] * dureza[a];

# mantenimento

var costoMant >=0;

var useTime >= 0; # hs
s.t. _useTime: useTime = sum{ a in aceites } aceiteRefinado[a] / 60;

var isInRange{ r in mant_ranges} binary >= 0;

## isInRange1;   0 - M (1 - range1) <= total <= 100 + M (1 - range1)
## isInRange2; 100 - M (1 - range2) <= total <= 200 + M (1 - range2)
## isInRange3; 200 - M (1 - range3) <= total <= 500 + M (1 - range3)
## isInRange4; 500 - M (1 - range4) <= total <=   M + M (1 - range4)
s.t. min_isInRange{ r in mant_ranges}: mant_mins[r] - M * ( 1-isInRange[r] ) <= useTime;
s.t. max_isInRange{ r in mant_ranges}: useTime <= mant_maxs[r] + M * ( 1-isInRange[r] );

s.t. _isInRange: 1 = sum{ r in mant_ranges } isInRange[r];

var mant_cost >= 0;
s.t. _mant_cost: mant_cost = sum{ r in mant_ranges } isInRange[r] * mant_price[r];

# funcional

var gain >= 0;
s.t. _gain: gain =  precioProd * sum{ a in aceites } aceiteRefinado[a];

maximize z: gain - mant_cost;

data;
param m := 0.1;
param M := 1000;
param precioProd := 150;
set aceites := A B C D E;
set lineas := 1 2;

param capacidadLinea :=  1 200 2 250;
param consumoLinea : A B C D E :=
  1 1 1 0 0 0
  2 0 0 1 1 1;

param durezaMax := 6;
param durezaMin := 3;
param dureza :=
  A 8.8
  B 6.1
  C 2.0
  D 4.2
  E 5.0;
param costo :=
  A 110
  B 120
  C 130
  D 110
  E 115;

param maxAceites := 3;
param minAceite := 20;

set mant_ranges := 1 2 3 4;
param mant_mins := 1 0 2 100 3 200 4 500;
param mant_maxs := 1 100 2 200 3 500 4 1000;
param mant_price := 1 5000 2 8000 3 9500 4 10000;

end;